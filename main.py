#!/usr/bin/env python3
"""
ZENOX Framework v2.0 - Enhanced CLI Version
Framework de Pentest e OSINT com interface terminal agressiva
Desenvolvido para Kali Linux e ambientes de pentesting
"""

import sys
import time
from ui_components import ZenoxUI
from scanner import start_scan

class ZenoxFramework:
    """Classe principal do ZENOX Framework"""
    
    def __init__(self):
        self.ui = ZenoxUI()
        self.running = True
        self.scan_history = []
    
    def show_banner(self):
        """Exibe banner e inicializa√ß√£o"""
        self.ui.clear_screen()
        self.ui.print_banner()
        
        # Efeito de inicializa√ß√£o
        init_messages = [
            "Carregando m√≥dulos de seguran√ßa...",
            "Inicializando scanner de rede...",
            "Verificando depend√™ncias...",
            "Sistema pronto para opera√ß√£o!"
        ]
        
        for msg in init_messages:
            self.ui.print_info(msg)
            time.sleep(0.3)
        
        self.ui.print_separator()
        time.sleep(0.5)
    
    def show_help(self):
        """Exibe ajuda e documenta√ß√£o"""
        self.ui.clear_screen()
        
        help_text = """
üîß ZENOX FRAMEWORK - GUIA DE USO

üìã COMANDOS PRINCIPAIS:
  1. Network Scan    - Varredura completa de rede e an√°lise de portas
  2. An√°lise Avan√ßada - An√°lise detalhada de vulnerabilidades (em desenvolvimento)
  3. Relat√≥rios      - Visualiza√ß√£o e exporta√ß√£o de resultados (em desenvolvimento)
  4. Configura√ß√µes   - Personaliza√ß√£o do framework (em desenvolvimento)
  5. Help & Docs     - Esta tela de ajuda

üéØ COMO USAR O SCANNER:
  ‚Ä¢ Digite o IP, hostname ou range de rede (ex: 192.168.1.1)
  ‚Ä¢ Suporte para ranges CIDR (ex: 192.168.1.0/24)
  ‚Ä¢ Suporte para hostnames (ex: google.com)

‚ö†Ô∏è  AVISOS IMPORTANTES:
  ‚Ä¢ Use apenas em redes autorizadas
  ‚Ä¢ Respeite as leis locais de ciberseguran√ßa
  ‚Ä¢ Este framework √© para fins educacionais e testes autorizados

üîó DEPEND√äNCIAS:
  ‚Ä¢ python-nmap: Scanner de rede
  ‚Ä¢ rich: Interface terminal avan√ßada
  ‚Ä¢ termcolor: Cores no terminal

üìö DOCUMENTA√á√ÉO COMPLETA:
  ‚Ä¢ GitHub: https://github.com/zenox-framework
  ‚Ä¢ Wiki: https://wiki.zenox-framework.com
        """
        
        from rich.panel import Panel
        help_panel = Panel(
            help_text.strip(),
            title="[bold cyan]ZENOX FRAMEWORK - DOCUMENTA√á√ÉO[/bold cyan]",
            border_style="cyan",
            padding=(1, 2)
        )
        
        self.ui.console.print(help_panel)
        self.ui.wait_for_enter()
    
    def network_scan_menu(self):
        """Menu de scan de rede"""
        self.ui.clear_screen()
        self.ui.print_info("M√ìDULO DE NETWORK SCAN ATIVADO")
        self.ui.print_separator()
        
        # Obter target do usu√°rio
        target = self.ui.get_user_choice(
            "Digite o IP, dom√≠nio ou range para escanear: ",
            valid_choices=None
        )
        
        if not target:
            return
        
        # Valida√ß√£o b√°sica
        if target.strip() == "":
            self.ui.print_error("Target n√£o pode estar vazio!")
            self.ui.wait_for_enter()
            return
        
        # Executar scan
        self.ui.print_separator()
        results = start_scan(target)
        
        # Salvar no hist√≥rico
        if results:
            self.scan_history.append({
                'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
                'target': target,
                'results': results
            })
    
    def show_coming_soon(self, feature_name):
        """Exibe mensagem de funcionalidade em desenvolvimento"""
        self.ui.clear_screen()
        
        coming_soon_text = f"""
üöß FUNCIONALIDADE EM DESENVOLVIMENTO

{feature_name} est√° sendo desenvolvida e estar√° dispon√≠vel em breve!

üìã ROADMAP:
  ‚Ä¢ Interface de configura√ß√£o avan√ßada
  ‚Ä¢ Relat√≥rios em PDF e HTML
  ‚Ä¢ Integra√ß√£o com bases de vulnerabilidades
  ‚Ä¢ M√≥dulos de OSINT
  ‚Ä¢ Scanner de aplica√ß√µes web
  ‚Ä¢ An√°lise de malware

üîî FIQUE ATUALIZADO:
  ‚Ä¢ GitHub: https://github.com/zenox-framework
  ‚Ä¢ Discord: https://discord.gg/zenox
        """
        
        from rich.panel import Panel
        dev_panel = Panel(
            coming_soon_text.strip(),
            title="[bold yellow]EM DESENVOLVIMENTO[/bold yellow]",
            border_style="yellow",
            padding=(1, 2)
        )
        
        self.ui.console.print(dev_panel)
        self.ui.wait_for_enter()
    
    def main_menu(self):
        """Menu principal do framework"""
        while self.running:
            self.ui.clear_screen()
            self.ui.print_banner()
            self.ui.print_menu()
            
            choice = self.ui.get_user_choice(
                "COMANDO> ",
                valid_choices=["0", "1", "2", "3", "4", "5", "6", "7"]
            )
            
            if choice == "1":
                self.network_scan_menu()
            elif choice == "2":
                self.vulnerability_scanner_menu()
            elif choice == "3":
                self.exploit_search_menu()
            elif choice == "4":
                self.brute_force_menu()
            elif choice == "5":
                self.show_coming_soon("WAR REPORTS")
            elif choice == "6":
                self.show_coming_soon("WEAPON CONFIG")
            elif choice == "7":
                self.show_help()
            elif choice == "0":
                self.exit_framework()
            elif choice is None:  # Ctrl+C
                self.exit_framework()
    
    def vulnerability_scanner_menu(self):
        """Menu do scanner de vulnerabilidades avan√ßado"""
        self.ui.clear_screen()
        self.ui.print_exploit("M√ìDULO DE CA√áA DE VULNERABILIDADES ATIVADO")
        self.ui.print_separator()
        
        # Obter target do usu√°rio
        target = self.ui.get_user_choice(
            "Digite o IP, dom√≠nio ou range para ca√ßar vulnerabilidades: ",
            valid_choices=None
        )
        
        if not target:
            return
        
        # Valida√ß√£o b√°sica
        if target.strip() == "":
            self.ui.print_error("Target n√£o pode estar vazio!")
            self.ui.wait_for_enter()
            return
        
        # Executar scan avan√ßado
        self.ui.print_separator()
        results = start_scan(target)
        
        # Salvar no hist√≥rico
        if results:
            self.scan_history.append({
                'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
                'target': target,
                'results': results,
                'scan_type': 'vulnerability_scan'
            })
    
    def exploit_search_menu(self):
        """Menu de busca de exploits"""
        self.ui.clear_screen()
        self.ui.print_exploit("M√ìDULO DE BUSCA DE EXPLOITS")
        self.ui.print_separator()
        
        exploit_info = """
üîì BUSCA DE EXPLOITS - EM DESENVOLVIMENTO

Este m√≥dulo permitir√°:
‚Ä¢ Busca autom√°tica de exploits baseada em servi√ßos detectados
‚Ä¢ Integra√ß√£o com bases de dados de vulnerabilidades (CVE, ExploitDB)
‚Ä¢ Sugest√µes de exploits baseadas nos resultados do scan
‚Ä¢ Links para ferramentas e payloads espec√≠ficos

üìã FUNCIONALIDADES PLANEJADAS:
‚Ä¢ Busca por CVE automatizada
‚Ä¢ Integra√ß√£o com Metasploit Framework
‚Ä¢ Gera√ß√£o autom√°tica de comandos de exploit
‚Ä¢ Base de dados local de exploits

üîî STATUS: BETA - Dispon√≠vel em breve!
        """
        
        from rich.panel import Panel
        exploit_panel = Panel(
            exploit_info.strip(),
            title="[bold magenta]EXPLOIT SEARCH ENGINE[/bold magenta]",
            border_style="magenta",
            padding=(1, 2)
        )
        
        self.ui.console.print(exploit_panel)
        self.ui.wait_for_enter()
    
    def brute_force_menu(self):
        """Menu de ataques de for√ßa bruta"""
        self.ui.clear_screen()
        self.ui.print_exploit("M√ìDULO DE FOR√áA BRUTA")
        self.ui.print_separator()
        
        # Aviso legal
        warning_text = """
‚ö†Ô∏è  AVISO LEGAL IMPORTANTE ‚ö†Ô∏è

Este m√≥dulo √© apenas para fins EDUCACIONAIS e testes AUTORIZADOS.

‚Ä¢ Use apenas em sistemas que voc√™ possui ou tem permiss√£o expl√≠cita
‚Ä¢ Ataques de for√ßa bruta podem ser ilegais em muitas jurisdi√ß√µes
‚Ä¢ Voc√™ √© totalmente respons√°vel pelo uso desta ferramenta
‚Ä¢ Os desenvolvedores n√£o se responsabilizam por uso inadequado

CONTINUAR APENAS SE VOC√ä ENTENDE E ACEITA ESTES TERMOS.
        """
        
        from rich.panel import Panel
        warning_panel = Panel(
            warning_text.strip(),
            title="[bold red]AVISO LEGAL[/bold red]",
            border_style="red",
            padding=(1, 2)
        )
        
        self.ui.console.print(warning_panel)
        
        # Confirmar aceita√ß√£o
        accept = self.ui.get_user_choice(
            "Digite 'ACEITO' para continuar ou qualquer outra coisa para voltar: ",
            valid_choices=None
        )
        
        if accept != "ACEITO":
            self.ui.print_info("Opera√ß√£o cancelada.")
            self.ui.wait_for_enter()
            return
        
        # Obter target
        target = self.ui.get_user_choice(
            "Digite o IP ou hostname do target AUTORIZADO: ",
            valid_choices=None
        )
        
        if not target or target.strip() == "":
            self.ui.print_error("Target n√£o pode estar vazio!")
            self.ui.wait_for_enter()
            return
        
        # Executar scan com foco em brute force
        self.ui.print_separator()
        self.ui.print_attack(f"Iniciando testes de for√ßa bruta em {target}")
        results = start_scan(target)
        
        # Salvar no hist√≥rico
        if results:
            self.scan_history.append({
                'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
                'target': target,
                'results': results,
                'scan_type': 'brute_force'
            })
    
    def exit_framework(self):
        """Encerra o framework"""
        self.ui.clear_screen()
        
        exit_text = """
üö™ ENCERRANDO ZENOX FRAMEWORK

Obrigado por usar o ZENOX Framework!

üìä ESTAT√çSTICAS DA SESS√ÉO:
  ‚Ä¢ Scans realizados: {scan_count}
  ‚Ä¢ Tempo de execu√ß√£o: {runtime}

üîí LIMPEZA DE SEGURAN√áA:
  ‚Ä¢ Cache limpo
  ‚Ä¢ Logs seguros
  ‚Ä¢ Mem√≥ria liberada

At√© a pr√≥xima, hacker! üéØ
        """.format(
            scan_count=len(self.scan_history),
            runtime="N/A"  # Implementar contador de tempo se necess√°rio
        )
        
        from rich.panel import Panel
        exit_panel = Panel(
            exit_text.strip(),
            title="[bold red]SAINDO...[/bold red]",
            border_style="red",
            padding=(1, 2)
        )
        
        self.ui.console.print(exit_panel)
        
        # Efeito de sa√≠da
        self.ui.print_info("Finalizando processos...")
        time.sleep(0.5)
        self.ui.print_success("Framework encerrado com seguran√ßa!")
        
        self.running = False
        sys.exit(0)

def main():
    """Fun√ß√£o principal"""
    try:
        # Verificar se est√° rodando no Python 3
        if sys.version_info[0] < 3:
            print("ERRO: ZENOX Framework requer Python 3.x")
            sys.exit(1)
        
        # Inicializar framework
        zenox = ZenoxFramework()
        
        # Exibir banner inicial
        zenox.show_banner()
        
        # Iniciar menu principal
        zenox.main_menu()
        
    except KeyboardInterrupt:
        print("\n\nüö™ Framework encerrado pelo usu√°rio.")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå ERRO CR√çTICO: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()

